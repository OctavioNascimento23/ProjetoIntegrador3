// Generated by view binder compiler. Do not edit!
package com.example.projetointegrador3.app2.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.Spinner;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.projetointegrador3.app2.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemRiskBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final EditText riskDescription;

  @NonNull
  public final Spinner riskSeverity;

  @NonNull
  public final Spinner riskStatus;

  @NonNull
  public final EditText riskTitle;

  @NonNull
  public final Button updateButton;

  private ItemRiskBinding(@NonNull LinearLayout rootView, @NonNull EditText riskDescription,
      @NonNull Spinner riskSeverity, @NonNull Spinner riskStatus, @NonNull EditText riskTitle,
      @NonNull Button updateButton) {
    this.rootView = rootView;
    this.riskDescription = riskDescription;
    this.riskSeverity = riskSeverity;
    this.riskStatus = riskStatus;
    this.riskTitle = riskTitle;
    this.updateButton = updateButton;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemRiskBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemRiskBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_risk, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemRiskBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.riskDescription;
      EditText riskDescription = ViewBindings.findChildViewById(rootView, id);
      if (riskDescription == null) {
        break missingId;
      }

      id = R.id.riskSeverity;
      Spinner riskSeverity = ViewBindings.findChildViewById(rootView, id);
      if (riskSeverity == null) {
        break missingId;
      }

      id = R.id.riskStatus;
      Spinner riskStatus = ViewBindings.findChildViewById(rootView, id);
      if (riskStatus == null) {
        break missingId;
      }

      id = R.id.riskTitle;
      EditText riskTitle = ViewBindings.findChildViewById(rootView, id);
      if (riskTitle == null) {
        break missingId;
      }

      id = R.id.updateButton;
      Button updateButton = ViewBindings.findChildViewById(rootView, id);
      if (updateButton == null) {
        break missingId;
      }

      return new ItemRiskBinding((LinearLayout) rootView, riskDescription, riskSeverity, riskStatus,
          riskTitle, updateButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
